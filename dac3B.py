import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

mu = 1.0/(81.30059+1.0) # from JPL 2021
LU = 384400 # km
TU = 4.3425*24*3600 # s
EMLs = np.array([[ 0.836915121, 0, 0],
                 [ 1.155682169, 0, 0],
                 [-1.005062646, 0, 0],
                 [0.487849,  0.866025,0],
                 [0.487849, -0.866025,0]])

L1Lyap = np.array([ 0.846915121142417, 0, 0,
                    0, -0.078240522634121, 0])
gateway_r0 = np.array([1.02202151273581740824714855590570360,
               0,
               -0.182096761524240501132977765539282777])
gateway_v0 = np.array([0, -0.103256341062793815791764364248006121, 0])
gateway_period = 1.5111111111111111111111111111111111111111
gateway_x0 = np.r_[gateway_r0, gateway_v0] # apoapsis
# IC's Courtesy Zimovan MS Thesis
DROs = np.array([1-mu-0.023413, 0, 0, 0, 0.744742, 0])

    # JC    #Period      # x0          #ydot0
#     3.3949 0.2230147974 0.9624690577 0.7184165432
#     3.1361 0.6166055596 0.9361690577 0.5420829797
#     3.0460 1.0873149322 0.9098690577 0.4861304073
#     2.9982 1.6036604892 0.8835690577 0.4704001643
#     2.9676 2.1456222060 0.8572690577 0.4752341941
#     2.9455 2.6935872117 0.8309690577 0.4931694567
#     2.9278 3.2259140152 0.8046690577 0.5206492176
#     2.9123 3.7214359005 0.7783690577 0.5556648548
#     2.8976 4.1639236713 0.7520690577 0.5969085865
#     2.8828 4.5451073473 0.7257690577 0.6434438745
#     2.8674 4.8656732383 0.6993690577 0.6947808121
#     2.8510 5.1282795896 0.6730690577 0.7500292555
#     2.8334 5.3419826389 0.6467690577 0.8090396816
#     2.8145 5.5150452938 0.6204690577 0.8716174367
#     2.7940 5.6550946637 0.5941690577 0.9376894311
#     2.7720 5.7686517772 0.5678690577 1.0072891703
#     2.7482 5.8610608744 0.5415690577 1.0805472211
#     2.7227 5.9366010546 0.5152690577 1.1576874834
#     2.6952 5.9986577916 0.4889690577 1.2390293886
#     2.6655 6.0500729893 0.4625690577 1.3253326531


# Also from Zimovan
NRHO = [0]
        #JC   # Period     #x0          #z0            #ydot0
    # 3.0591 1.3632096570 1.0110350588 -0.1731500000 -0.0780141199
    # 3.0493 1.4748399512 1.0192741002 -0.1801324242 -0.0971927950 Gateway analog if southern
    # 3.0411 1.5872714606 1.0277926091 -0.1858044184 -0.1154896637 
    # 3.0341 1.7008482705 1.0362652156 -0.1904417454 -0.1322667493
    # 3.0283 1.8155211042 1.0445681848 -0.1942338538 -0.1473971442
    # 3.0236 1.9311168544 1.0526805665 -0.1972878310 -0.1609628828
    # 3.0199 2.0474562565 1.0606277874 -0.1996480091 -0.1731020372
    # 3.0171 2.1741533495 1.0691059976 -0.2014140887 -0.1847950147
    # 3.0155 2.2915829886 1.0768767277 -0.2022559057 -0.1943508955
    # 3.0152 2.4093619266 1.0846726654 -0.2022295078 -0.2027817501
    # 3.0162 2.5273849254 1.0925906981 -0.2011567058 -0.2101017213
    # 3.0188 2.6455248145 1.1007585320 -0.1987609769 -0.2162644440
    # 3.0234 2.7635889805 1.1093498794 -0.1946155759 -0.2211327592
    # 3.0313 2.8909903824 1.1194130163 -0.1873686594 -0.2246002627
    # 3.0424 3.0073088423 1.1297344316 -0.1769810336 -0.2254855800
    # 3.0584 3.1205655022 1.1413664663 -0.1612996515 -0.2229158600
    # 3.0807 3.2266000495 1.1542349115 -0.1379744940 -0.2147411949
    # 3.1085 3.3173903769 1.1669663066 -0.1049833863 -0.1984458292
    # 3.1359 3.3833013605 1.1766385512 -0.0621463948 -0.1748356762
    # 3.1521 3.4154433338 1.1808881373 -0.0032736457 -0.1559184478


def CR3BEOM(x,mu):

    x0 = mu + x[0]
    x1 = x[1]**2 + x[2]**2
    x2 = (mu - 1)/(x0**2 + x1)**(3/2)
    x3 = x0 - 1
    x4 = mu/(x1 + x3**2)**(3/2)
    x5 = x2 - x4

    Ux = np.array([x0*x2 - x3*x4 + x[0],
                   x[1]*(x5 + 1),
                   x5*x[2]])

    xdot = np.array([x[3],
                     x[4],
                     x[5],
                     2*x[4] + Ux[0],
                     -2*x[3] + Ux[1],
                     Ux[2]])
    return xdot

def CR3BA(x,mu):
    x0 = mu + x[0]
    x1 = x0**2
    x2 = mu - 1
    x3 = x[1]**2
    x4 = x[2]**2
    x5 = x3 + x4
    x6 = x1 + x5
    x7 = x2/x6**(5/2)
    x8 = 3*x7
    x9 = x0 - 1
    x10 = x9**2
    x11 = x10 + x5
    x12 = mu/x11**(5/2)
    x13 = 3*x12
    x14 = -mu/x11**(3/2) + x2/x6**(3/2)
    x15 = x14 + 1
    x16 = -3*x0*x7 + 3*x12*x9
    x17 = x16*x[1]
    x18 = x16*x[2]
    x19 = 3*x[1]*x[2]*(x12 - x7)
    Uxx = np.array([
    [-x1*x8 + x10*x13 + x15,                  x17,                  x18],
    [                   x17, x13*x3 + x15 - x3*x8,                  x19],
    [                   x18,                  x19, x13*x4 + x14 - x4*x8]])
    O = np.zeros((3,3))
    I = np.eye(3)
    B = np.array([
        [ 0, 2, 0],
        [-2, 0, 0],
        [ 0, 0, 0]])
    A = np.block([
        [O, I],
        [Uxx, B]])
    return A
